{"version":3,"sources":["Routing.js","App.js","reportWebVitals.js","index.js"],"names":["Routing","props","useEffect","console","log","L","control","waypoints","latLng","language","lineOptions","styles","color","opacity","weight","createMarker","i","waypoint","n","marker","icon","iconUrl","iconSize","addTo","map","coronaVrius","Icon","thermal","entertainment","night","fire","App","useState","activeCovidInfo","setActiveCovidInfo","activeOtcInfo","setActiveOtcInfo","coviData","setCovidData","otcData","setOtcData","status1","setStatus1","status2","setStatus2","axios","get","then","res","data","mapInfo","setMapInfo","onClick","prevStatus1","prevStatus2","MapContainer","className","center","zoom","MapConsumer","TileLayer","attribution","url","length","c","index","Marker","position","lat","long","eventHandlers","click","e","Popup","d","cate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14aac093.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport L from 'leaflet'\nimport \"leaflet-routing-machine\";\n\nfunction Routing(props) {\n    useEffect(() => {\n        console.log(L)\n        L.Routing.control({\n            waypoints: [\n                L.latLng(37.56, 126.99),\n                L.latLng(37.5, 127.25)\n            ],\n            language: \"ko\",\n            lineOptions: {\n                styles: [\n                    {\n                        color: \"blue\",\n                        opacity: 0.5,\n                        weight: 6.5\n                    }\n                ]\n            },\n            \n            createMarker: (i, waypoint, n) => {\n                const marker = L.marker(\n                    waypoint.latLng,\n                    {\n                        icon: L.icon({\n                            iconUrl: '/marker.svg',\n                            iconSize: [25, 25]\n                        })\n                    }\n                )\n                return marker\n            },\n\n        }).addTo(props.map)\n    }, [])\n\n    return (\n        <></>\n    )\n}\n\nexport default Routing","import React, { useState, useEffect } from 'react'\nimport { Icon } from 'leaflet'\nimport { MapContainer, TileLayer, Marker, Popup, MapConsumer } from 'react-leaflet'\nimport axios from 'axios'\nimport Routing from './Routing'\nimport './App.css';\n\nconst coronaVrius = new Icon({\n  iconUrl: '/coronavirus.svg',\n  iconSize: [25, 25]\n})\nconst thermal = new Icon({\n  iconUrl: '/heating.svg',\n  iconSize: [25, 25]\n})\nconst entertainment = new Icon({\n  iconUrl: '/male-disc-jockey.svg',\n  iconSize: [25, 25]\n})\nconst night = new Icon({\n  iconUrl: '/half-moon.svg',\n  iconSize: [25, 25]\n})\nconst fire = new Icon({\n  iconUrl: '/fire.svg',\n  iconSize: [25, 25]\n})\n\nfunction App() {\n  const [activeCovidInfo, setActiveCovidInfo] = useState(null)\n  const [activeOtcInfo, setActiveOtcInfo] = useState(null)\n  console.log(\"CI\", activeCovidInfo)\n  console.log(\"OTCI\", activeOtcInfo)\n  const [coviData, setCovidData] = useState([])\n  const [otcData, setOtcData] = useState([])\n  const [status1, setStatus1] = useState(true)\n  const [status2, setStatus2] = useState(true)\n\n  useEffect(() => {\n    axios.get('./covidData.json')\n      .then((res) => {\n        setCovidData(res.data)\n      })\n    axios.get('./otcData.json')\n      .then((res) => {\n        setOtcData(res.data)\n      })\n    console.log(coviData, otcData)\n  }, [])\n\n  const handleCoronaVirusData = () => {\n    setStatus1((prevStatus1) => { return !prevStatus1 })\n  }\n  const handleOtcData = () => {\n    setStatus2((prevStatus2) => { return !prevStatus2 })\n  }\n  const [mapInfo, setMapInfo] = useState(null)\n  \n  return (\n    <>\n      <button onClick={() => handleCoronaVirusData()}>{status1 ? 'Remove Corona Virus Data' : 'Show Corona Virus Data'}</button>\n      <button onClick={() => handleOtcData()}>{status2 ? 'Remove OTC Data' : 'Show OTC Data'}</button>\n      \n      <MapContainer className=\"leaflet-map-container\" center={[37.55070021748518, 127.16837812708327]} zoom={12}>\n      <MapConsumer>\n        {(map) => {\n          setMapInfo(map)\n          return null\n        }}\n      </MapConsumer>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {status1 && coviData.length > 0 && coviData.map((c, index) => (\n          <Marker\n            key={index}\n            position={[\n              c.lat,\n              c.long\n            ]}\n            eventHandlers={{\n              click: (e) => {\n                setActiveCovidInfo(c);\n                // console.log(e.latlng)\n                // console.log('clicked', e)\n              },\n            }}\n            icon={coronaVrius}\n          >\n            {(\n              <Popup\n                position={[\n                  c.long,\n                  c.lat\n                ]}\n              >\n                <div>\n                  <h1>{activeCovidInfo != null ? activeCovidInfo['location_name'] : ''}</h1>\n                  <p>{activeCovidInfo != null ? activeCovidInfo.lat : ''}</p>\n                  <p>{activeCovidInfo != null ? activeCovidInfo.long : ''}</p>\n                  <p>{activeCovidInfo != null ? activeCovidInfo['num_infected'] : ''}</p>\n                </div>\n              </Popup>\n            )}\n          </Marker>\n        ))}\n        {status2 && otcData.length > 0 && otcData.map((d, index) => (\n          <Marker\n            key={index}\n            position={[\n              d.lat,\n              d.long\n            ]}\n            eventHandlers={{\n              click: (e) => {\n                setActiveOtcInfo(d);\n                // console.log(e.latlng)\n                // console.log('clicked', e)\n              },\n            }}\n            icon={d.cate == 'thermal' ? thermal : d.cate == 'entertainment' ? entertainment : d.cate == 'night' ? night : fire}\n          >\n            {(\n              <Popup\n                position={[\n                  d.long,\n                  d.lat\n                ]}\n              >\n                <div>\n                  <h1>{activeOtcInfo != null ? activeOtcInfo['cate'] : ''}</h1>\n                  <p>{activeOtcInfo != null ? activeOtcInfo.lat : ''}</p>\n                  <p>{activeOtcInfo != null ? activeOtcInfo.long : ''}</p>\n                  <p>{activeOtcInfo != null ? activeOtcInfo['temp'] : ''}</p>\n                </div>\n              </Popup>\n            )}\n          </Marker>\n        ))}\n        {mapInfo != null && <Routing map={mapInfo}/>}\n      </MapContainer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'leaflet/dist/leaflet.css'\nimport 'leaflet-routing-machine/dist/leaflet-routing-machine.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}